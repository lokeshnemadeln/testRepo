- name: Create backup folder in node2 and node3
  file:
    path: "{{ backup_dir }}"
    state: directory
  when: inventory_hostname in groups['node2'] + groups['node3']

- name: Take Postgres backup in node2
  become: true
  #shell: PGPASSWORD={{ db_password }} -U {{ db_user }} pg_dump {{ db_name }} > {{ backup_dir }}/{{ backup_file }}.sql
  shell: sudo -u {{db_user}} pg_dump {{db_name}} > {{ backup_dir }}/{{ backup_file }}.sql
  register: pg_db_result
  when: inventory_hostname in groups['node2'][0]

- name: PostgreSQL backup result in node2
  debug:
    var: pg_db_result
  when: inventory_hostname in groups['node2'][0]

- name: Compress PostgreSQL backup in node2
  archive:
    path: "{{ backup_dir }}/{{ backup_file }}.sql"
    dest: "{{ backup_dir }}/{{ backup_file }}.gz"
    format: gz
  when: inventory_hostname in groups['node2'][0]

- name: Copy compress file from target machine
  fetch:
    src: "{{ backup_dir }}/{{ backup_file }}.gz"
    dest: "{{ backup_dir }}/"
    flat: yes
  when: inventory_hostname in groups['node2'][0]

- name: Copy file from target1  to target2 machine
  copy:
    src: "{{ backup_dir }}/{{ backup_file }}.gz"
    dest: "{{ backup_dir }}/{{ backup_file }}.gz"
  register: copy_path
  when: inventory_hostname == groups['node3'][0]

- name: Print copy path of target2 machine
  debug:
    var: copy_path
  when: inventory_hostname in groups['node3'][0]

- name: Generate md5sum of zip file on node2
  shell: md5sum "{{ backup_dir }}/{{ backup_file }}.gz"
  register: md5_node2

- name: Md5 result in node2
  debug:
    var: md5_node2.stdout[0:32]

- name: Generate md5sum of zip file on node3
  shell: md5sum "{{ backup_dir }}/{{ backup_file }}.gz"
  register: md5_node3

- name: Md5 result in node3
  debug:
    var: md5_node3.stdout[0:32]

- name: Compare md5sum values of node2 and node3
  debug:
    msg: "SUCCESS: Node2 and Node3 have the same MD5 hash values"
  when: md5_node2.stdout[0:32] == md5_node3.stdout[0:32] and inventory_hostname in groups['node2'] + groups['node3']

- name: Unzip the backup file
  shell: gunzip {{ backup_dir }}/{{ backup_file }}.gz
  when: inventory_hostname in groups['node3'][0]

- name: Install PostgreSQL
  become: true
  apt:
    name: postgresql
    state: present
  when: inventory_hostname in groups['node3'][0]

- name: Delete database
  #become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
    state: absent
  when: inventory_hostname in groups['node3'][0]

- name: Create database
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
    state: present
  when: inventory_hostname in groups['node3'][0]

- name: Restore Postgres in node3
  shell: PGPASSWORD={{ db_password }} psql -U {{ db_user }} -d {{ db_name }} -f {{ backup_dir }}/{{ backup_file }}
  register: pg_restore_result
  when: inventory_hostname in groups['node3'][0]

